---
description: 
globs: 
alwaysApply: false
---
# PyAzul Future Development Notes & Minor Refinements

This document lists identified areas for future improvements, potential refactorings, and tasks to enhance the `pyazul` library.

1.  **`PyAzul.secure_3ds_method` Signature Consistency**:
    *   **Current Signature**: `PyAzul.secure_3ds_method(azul_order_id: str, method_notification_status: str)`
    *   **Observation**: `PyAzul.secure_challenge` uses `secure_id: str` to fetch session details internally. For better consistency and user experience in the 3DS Method Notification callback, `secure_3ds_method` could also primarily use `secure_id`.
    *   **Proposed Change**:
        1.  Modify `PyAzul.secure_3ds_method` ([pyazul/index.py](mdc:pyazul/index.py)) to accept `secure_id: str, method_notification_status: str`.
        2.  Inside this method, retrieve the `azul_order_id` from the session store using `secure_id`:
            ```python
            # Example internal logic in PyAzul.secure_3ds_method
            session = await self.session_store.get_session(secure_id)
            if not session or "azul_order_id" not in session:
                raise AzulError(f"Session or AzulOrderId not found for secure_id: {secure_id}")
            azul_order_id_from_session = session["azul_order_id"]
            return await self.secure.process_3ds_method(azul_order_id_from_session, method_notification_status)
            ```
    *   **Benefit**: Simplifies the developer's task in the `MethodNotificationUrl` callback, as they only need to pass the `secure_id` (which is readily available from the callback URL query parameter). This aligns with the pattern in `secure_challenge`.
    *   The [README.md](mdc:README.md) example for the 3DS Method callback currently shows manual fetching of `azul_order_id`; this refactor would streamline that.

2.  **Review and Integrate/Clean `pyazul/token_secure_webapp.py`**:
    *   **Observation**: The file `[pyazul/token_secure_webapp.py](mdc:pyazul/token_secure_webapp.py)` is present and is 14KB, but its current role in the refactored library is unclear.
    *   **Action**:
        *   Thoroughly review its contents.
        *   If it's an example application, it should be:
            1.  Moved to the `pyazul/examples/` directory.
            2.  Updated to use the latest library structure (e.g., `PyAzul` facade, correct 3DS flow methods, pluggable session store).
            3.  Simplified if it contains overly complex or outdated logic.
        *   If it contains any core logic or an alternative `PyAzul` implementation that is still relevant, this logic should be properly integrated into the main library components or deprecated if redundant.

3.  **Library Versioning**:
    *   **Current Version**: `__version__ = "0.4.4alpha"` in `[pyazul/__init__.py](mdc:pyazul/__init__.py)`.
    *   **Action**: Given the substantial refactoring (centralized `AzulAPI`, integrated `SecureService`, pluggable `ThreeDSSessionStore`, clarified model structure, and major [README.md](mdc:README.md) updates), the version number should be incremented significantly.
        *   Consider a bump to `0.5.0` at minimum. If any changes are considered breaking from a user perspective of `0.4.4alpha` (e.g., removal of the old `PyAzul(api_client=...)` pattern which was in the README), a more significant bump like `1.0.0` might be warranted if this is the first stable release after these refactors.

4.  **Address Remaining Linter Issues from `[coding_standards_and_linting.mdc](mdc:coding_standards_and_linting.mdc)`**:
    *   Ensure all instances of `raise Exception from original_exception` are correctly implemented, especially in `[pyazul/api/client.py](mdc:pyazul/api/client.py)`.
    *   Fix the unused loop variable `field` in `AzulAPI._check_for_errors` in `[pyazul/api/client.py](mdc:pyazul/api/client.py)`.

5.  **Verify API Endpoint Operations**:
    *   **Observation**: The `operation` parameter in `AzulAPI._async_request` (which appends to the URL like `?SomeOperation`) was used by some service methods in older versions but has been simplified in recent refactors (e.g., `TransactionService` methods now mostly call `_async_request` without an explicit `operation`).
    *   **Action**: Double-check the Azul API documentation to confirm if different transaction types (e.g., void, verify, post-sale) require specific `operation` strings appended to the base payment URL, or if they are distinct endpoints, or if the transaction type is solely determined by fields in the JSON payload. Adjust `AzulAPI` and service calls if specific `operation` strings are necessary. `AzulAPI._build_endpoint` already supports this.

6.  **Comprehensive Testing**:
    *   **Action**: Expand test coverage in the `tests/` directory. Prioritize:
        *   End-to-end tests for the 3D Secure flow, including different ACS responses and session store interactions.
        *   Unit tests for all public methods in `PyAzul` and services.
        *   Tests for various configurations in `AzulSettings` (e.g., certificate content vs. path).
        *   Thorough testing of error conditions and the custom exception hierarchy.

7.  **Documentation Review**:
    *   **Action**: Conduct a full pass over all docstrings in public modules, classes, and methods for clarity, accuracy, and completeness (Args, Returns, Raises).
    *   Ensure the [README.md](mdc:README.md) accurately reflects all functionalities and best practices.
